# -*- coding: utf-8 -*-
"""rnnOzone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hW8z6g_2bF_hxg_csJXlGfumqhbMsFXw
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import plotly as py
from keras.layers import *
from keras.models import *
from keras.utils import *
from sklearn.preprocessing import MinMaxScaler

# !wget -c https://archive.ics.uci.edu/ml/machine-learning-databases/ozone/eighthr.data

df = pd.read_csv('eighthr.data')
print(df.head())

label = [ 'feat_{}'.format(i) for i in range(73) ]
df = pd.read_csv('eighthr.data', names=label)
print(df.head())

print(df.shape)

# df.dtypes # object
df = df.apply(pd.to_numeric, errors='coerce')     # NaN
print(df.head())

print(df.dtypes.head())

df.dropna(inplace=True)
print(df.head(10))
print(df.shape)

print(df.describe())

Y = df['feat_72']
print(Y.shape)

Y = to_categorical(Y)
print(Y.shape)

df.drop(['feat_72'], axis=1, inplace=True)
print(df.head())

X_train = np.asarray(df[:-100].values.tolist(), dtype=np.float64)
X_test = np.asarray(df[-100:].values.tolist(), dtype=np.float64)

Y_train = Y[:-100]
Y_test = Y[-100:]

print(X_train.shape)
print(Y_train.shape)

# 갯수를 10개 단위로 맞추기 위해서
X_train = X_train[:1700]
Y_train = Y_train[:1700]

print(X_train.shape)
print(Y_train.shape)

## rnn  --> input is 3 dim --> (samples, timestep, feature)
X_train = X_train.reshape(-1, 10, 72)
Y_train = Y_train.reshape(-1, 10, 2)

print(X_train.shape)
print(Y_train.shape)

model = Sequential()
model.add(LSTM(128, input_shape=(10, 72,), return_sequences=True))
model.add(LSTM(256, return_sequences=True))   # many-to-many
model.add(Dense(2, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model.summary()

hist = model.fit(X_train, Y_train, epochs=10, batch_size=1, validation_split=0.1)

X_test = X_test.reshape(-1, 10, 72)
Y_test = Y_test.reshape(-1, 10, 2)

score = model.evaluate(X_test, Y_test)
print(print(score))