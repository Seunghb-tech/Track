# -*- coding: utf-8 -*-
"""cnnLastof.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cdafAvyMYh1zxRNP8VIbULyVUE6DoO0O
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import plotly as py
from keras.layers import *
from keras.models import *
from keras.utils import *
from sklearn.preprocessing import *
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences 
import random
import re

# https://gamefaqs.gamespot.com/ps3/652686-the-last-of-us/faqs/68485
file = 'lastofus.txt'     # utf-8 format,  pycharm --> ANSI format
text = ''
array = []
with open(file) as f :
  lines = f.readlines()
  # for l in lines:
  #   print(l)
  text = text.join([l for l in lines if re.match(r'^[A-Z].*:', l)])

# pribt(text)
for t in text.split('\n')[:1000]:     # 1000만 사용하자
  #print(t)
  array.append(t)
# print(array)

token = Tokenizer(lower=False, filters='.,?;\'\"-')
token.fit_on_texts(array)

# token.word_index
print(len(token.word_index))

seq = token.texts_to_sequences(array)
# seq

# input  ---> 3 dim : (samples, timestamp, feature) --> 0으로 padding과 앞에서 잘라주기가 필요
seq = pad_sequences(seq, maxlen=10)
print(seq)

print(seq.shape)

X = seq

Y = Y = np.vstack((X[1:], X[0]))    # 한칸 위로 올림
print(Y)

print(Y.shape)

X = X.reshape(-1, 10, 1)   # multiclassification 문제임 or Regression?
Y = Y.reshape(-1, 10, 1)

print(X.shape)

print(Y)
Y = to_categorical(Y)
print(Y.shape)     # (1000, 10, 1385)

'''
기존 학습 방향 : -> -> -> -> -> ->
Bidirectional : <- <- <- <- 학습도 가능
SimpleRNN은 LSTM과 유사, Timestep이 짧은 경우에 사용 --> GRU/LSTM으로 변경 가능
'''
model = Sequential()
model.add(Bidirectional(SimpleRNN(128, return_sequences=True), input_shape=(10, 1)))
model.add(Bidirectional(SimpleRNN(128, return_sequences=True)))
model.add(Dense(1385,activation='softmax'))
model.summary()

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X, Y, epochs=10, batch_size=1)

model.save('model.d100')

model = load_model('model.d100')

pred = model.predict(X[:1])
print(pred)

print(pred.shape)

pred = np.argmax(pred, axis=2)
print(pred)

print(pred.shape)

# token.word_index 반대가 필요
idx_word = {}
for w in token.word_index:
    idx_word[token.word_index[w]] = w
# idx_word

# print(pred)
# for l in pred:
#   for w in l:
#      print(w)

temp = ''
for l in pred:
  for w in l:
    if w != 0:
      temp += idx_word[w]
      temp += ' '
print(temp)

for i in range(10):
    temp = ''
    ran = random.randrange(0, len(X))
    pred = model.predict(np.expand_dims(X[ran], axis=0))
    pred = np.argmax(pred, axis=2)

    for line in pred:
        for word in line:        
            if word != 0:            
                temp += idx_word[word]
                temp += ' '
        temp += '\n'
    print(array[ran])
    print(temp)

